{"version":3,"sources":["logo.svg","components/Banner/banner.js","components/Employee/employee.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Banner","className","Employee","props","scope","number","name","lastname","roles","handle","App","state","data","value","e","this","setState","target","toLowerCase","employees","filter","employee","keys","Object","values","i","length","includes","type","onChange","handleChange","map","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"syBAAAA,EAAOC,QAAU,IAA0B,kC,8KCc5BC,MAXf,WACI,OACI,yBAAKC,UAAU,cACX,mE,aCWGC,MAdf,SAAkBC,GAChB,OAEI,4BACE,wBAAIC,MAAM,OAAOD,EAAME,QACvB,4BAAKF,EAAMG,MACX,4BAAKH,EAAMI,UACX,4BAAKJ,EAAMK,OACX,4BAAKL,EAAMM,UCkEJC,G,wDArEb,aAAe,IAAD,8BACZ,gBACKC,MAAO,CACVC,KAAMA,EACNC,MAAO,IAJG,E,yDAQDC,GACXC,KAAKC,SAAS,CACZH,MAAOC,EAAEG,OAAOJ,MAAMK,kB,+BAKhB,IAAD,OACDC,EAAYJ,KAAKJ,MAAMC,KAAKQ,QAAO,SAAAC,GAGvC,IAFA,IAAMC,EAAOC,OAAOC,OAAOH,GAElBI,EAAI,EAAGA,EAAIH,EAAKI,OAAQD,IAC/B,GAAGH,EAAKG,GAAGP,cAAcS,SAAS,EAAKhB,MAAME,OAC3C,OAAO,EAGX,OAAO,KAET,OACE,yBAAKZ,UAAU,aACb,kBAAC,EAAD,MACA,8BACE,uCAEE,2BACE2B,KAAK,OACLf,MAAOE,KAAKJ,MAAME,MAClBgB,SAAU,SAACf,GAAD,OAAO,EAAKgB,aAAahB,OAGvC,2BAAOc,KAAK,SAASf,MAAM,YAG7B,2BAAOZ,UAAU,oBACf,+BACE,4BACE,wBAAIG,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,iBAGJ,+BACGe,EAAUY,KAAI,SAACV,GAAD,OACb,kBAAC,EAAD,CACEW,IAAKX,EAAShB,OACdA,OAAQgB,EAAShB,OACjBC,KAAMe,EAASf,KACfC,SAAUc,EAASd,SACnBC,MAAOa,EAASb,MAChBC,OAAQY,EAASZ,mB,GA5DfwB,IAAMC,YCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.866a2314.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\nfunction Banner() {\r\n    return (\r\n        <div className=\"row Banner\">\r\n            <h4>Dunder Mifflin Employee Directory\r\n\r\n            </h4>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Banner;","import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\nfunction Employee(props) {\r\n  return (\r\n    \r\n      <tr>\r\n        <th scope=\"row\">{props.number}</th>\r\n        <td>{props.name}</td>\r\n        <td>{props.lastname}</td>\r\n        <td>{props.roles}</td>\r\n        <td>{props.handle}</td>\r\n      </tr>\r\n    \r\n  );\r\n}\r\n\r\nexport default Employee;\r\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport Banner from \"./components/Banner/banner\";\nimport data from \"./data.json\";\nimport Employee from \"./components/Employee/employee\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state ={\n      data: data,\n      value: \"\"\n    }\n  };\n\n  handleChange(e)  {\n    this.setState({\n      value: e.target.value.toLowerCase()\n    })\n  }\n\n\n  render() {\n    const employees = this.state.data.filter(employee => {\n      const keys = Object.values(employee);\n  \n      for(let  i = 0; i < keys.length; i++){\n        if(keys[i].toLowerCase().includes(this.state.value)){\n          return true;\n        }\n      }\n      return false;\n    })\n    return (\n      <div className=\"container\">\n        <Banner />\n        <form>\n          <label>\n            Name:\n            <input\n              type=\"text\"\n              value={this.state.value}\n              onChange={(e) => this.handleChange(e)}\n            />\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n\n        <table className=\"table table-dark\">\n          <thead>\n            <tr>\n              <th scope=\"col\">#</th>\n              <th scope=\"col\">First</th>\n              <th scope=\"col\">Last</th>\n              <th scope=\"col\">Roles</th>\n              <th scope=\"col\">Work Handle</th>\n            </tr>\n          </thead>\n          <tbody>\n            {employees.map((employee) => (\n              <Employee\n                key={employee.number}\n                number={employee.number}\n                name={employee.name}\n                lastname={employee.lastname}\n                roles={employee.roles}\n                handle={employee.handle}\n              />\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}